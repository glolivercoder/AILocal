#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script de teste para verificar se o erro do ai_agent_gui.py foi corrigido
"""

import sys
import os

def test_import():
    """Testa a importa√ß√£o do ai_agent_gui"""
    try:
        print("üîç Testando importa√ß√£o do ai_agent_gui...")
        
        # Tentar importar o m√≥dulo
        import ai_agent_gui
        
        print("‚úÖ Importa√ß√£o bem-sucedida!")
        
        # Verificar se a classe principal existe
        if hasattr(ai_agent_gui, 'AiAgentGUI'):
            print("‚úÖ Classe AiAgentGUI encontrada!")
            
            # Verificar se os m√©todos necess√°rios existem
            gui_class = ai_agent_gui.AiAgentGUI
            
            required_methods = [
                'load_cursor_mcps',
                'save_cursor_mcps',
                'install_filesystem_mcp'
            ]
            
            missing_methods = []
            for method in required_methods:
                if not hasattr(gui_class, method):
                    missing_methods.append(method)
            
            if missing_methods:
                print(f"‚ùå M√©todos faltando: {missing_methods}")
                return False
            else:
                print("‚úÖ Todos os m√©todos necess√°rios est√£o presentes!")
                return True
        else:
            print("‚ùå Classe AiAgentGUI n√£o encontrada!")
            return False
            
    except ImportError as e:
        print(f"‚ùå Erro de importa√ß√£o: {e}")
        return False
    except Exception as e:
        print(f"‚ùå Erro inesperado: {e}")
        return False

def test_instantiation():
    """Testa a cria√ß√£o de uma inst√¢ncia (sem interface gr√°fica)"""
    try:
        print("\nüîç Testando cria√ß√£o de inst√¢ncia...")
        
        # Simular ambiente sem display para evitar erro de GUI
        os.environ['QT_QPA_PLATFORM'] = 'offscreen'
        
        from PyQt5.QtWidgets import QApplication
        import ai_agent_gui
        
        # Criar aplica√ß√£o Qt
        app = QApplication([])
        
        # Tentar criar inst√¢ncia
        gui = ai_agent_gui.AiAgentGUI()
        
        print("‚úÖ Inst√¢ncia criada com sucesso!")
        
        # Verificar se os m√©todos podem ser chamados (sem executar)
        if hasattr(gui, 'load_cursor_mcps') and callable(gui.load_cursor_mcps):
            print("‚úÖ M√©todo load_cursor_mcps √© cham√°vel!")
        
        if hasattr(gui, 'save_cursor_mcps') and callable(gui.save_cursor_mcps):
            print("‚úÖ M√©todo save_cursor_mcps √© cham√°vel!")
            
        if hasattr(gui, 'install_filesystem_mcp') and callable(gui.install_filesystem_mcp):
            print("‚úÖ M√©todo install_filesystem_mcp √© cham√°vel!")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao criar inst√¢ncia: {e}")
        return False

def main():
    """Fun√ß√£o principal"""
    print("="*60)
    print("    TESTE DE CORRE√á√ÉO DO AI_AGENT_GUI")
    print("="*60)
    
    # Teste 1: Importa√ß√£o
    import_ok = test_import()
    
    # Teste 2: Instancia√ß√£o (apenas se importa√ß√£o funcionou)
    instantiation_ok = False
    if import_ok:
        instantiation_ok = test_instantiation()
    
    # Resumo
    print("\n" + "="*60)
    print("    RESUMO DOS TESTES")
    print("="*60)
    print(f"Importa√ß√£o: {'‚úÖ OK' if import_ok else '‚ùå FALHOU'}")
    print(f"Instancia√ß√£o: {'‚úÖ OK' if instantiation_ok else '‚ùå FALHOU'}")
    
    if import_ok and instantiation_ok:
        print("\nüéâ SUCESSO! O erro foi corrigido!")
        print("\nüí° Agora voc√™ pode executar:")
        print("   python ai_agent_gui.py")
    else:
        print("\n‚ö†Ô∏è  Ainda h√° problemas que precisam ser corrigidos.")
    
    print("\nüìÅ Arquivos importantes:")
    print("   - ai_agent_gui.py (interface principal)")
    print("   - cursor_mcp_manager.py (gerenciador MCP)")
    
if __name__ == "__main__":
    main()