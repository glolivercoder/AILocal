#!/usr/bin/env python3
"""
Vers√£o alternativa do Agent-S para Python 3.12.10
Implementa√ß√£o simplificada baseada nos conceitos do Agent-S
"""

import os
import sys
import pyautogui
import io
import json
import requests
import base64
from pathlib import Path
from typing import Dict, List, Optional, Tuple
import platform
import subprocess

class SimpleAgentS:
    def __init__(self, api_key: Optional[str] = None, model: str = "claude-3-5-sonnet-20241022"):
        self.api_key = api_key or os.getenv("ANTHROPIC_API_KEY")
        self.model = model
        self.platform = platform.system().lower()
        
        # Configurar PyAutoGUI
        pyautogui.FAILSAFE = True
        pyautogui.PAUSE = 0.5
        
    def capture_screenshot(self) -> bytes:
        """Captura screenshot da tela"""
        screenshot = pyautogui.screenshot()
        buffered = io.BytesIO()
        screenshot.save(buffered, format="PNG")
        return buffered.getvalue()
    
    def encode_image(self, image_bytes: bytes) -> str:
        """Codifica imagem em base64"""
        return base64.b64encode(image_bytes).decode('utf-8')
    
    def analyze_screen(self, instruction: str, screenshot_bytes: bytes) -> Dict:
        """Analisa a tela e gera a√ß√µes usando Claude"""
        if not self.api_key:
            return {"error": "API key n√£o configurada"}
        
        # Codificar screenshot
        image_base64 = self.encode_image(screenshot_bytes)
        
        # Preparar prompt
        prompt = f"""
Voc√™ √© um agente de automa√ß√£o de desktop. Analise a screenshot e gere c√≥digo Python usando PyAutoGUI para executar a instru√ß√£o.

Instru√ß√£o: {instruction}

Gere apenas o c√≥digo Python necess√°rio, sem explica√ß√µes. Use PyAutoGUI para:
- Clicar em elementos: pyautogui.click(x, y)
- Digitar texto: pyautogui.write('texto')
- Pressionar teclas: pyautogui.press('enter')
- Mover mouse: pyautogui.moveTo(x, y)
- Aguardar: pyautogui.sleep(1)

C√≥digo Python:
"""
        
        # Chamar Claude API
        headers = {
            "Content-Type": "application/json",
            "x-api-key": self.api_key,
            "anthropic-version": "2023-06-01"
        }
        
        data = {
            "model": self.model,
            "max_tokens": 1000,
            "messages": [
                {
                    "role": "user",
                    "content": [
                        {
                            "type": "text",
                            "text": prompt
                        },
                        {
                            "type": "image",
                            "source": {
                                "type": "base64",
                                "media_type": "image/png",
                                "data": image_base64
                            }
                        }
                    ]
                }
            ]
        }
        
        try:
            response = requests.post(
                "https://api.anthropic.com/v1/messages",
                headers=headers,
                json=data,
                timeout=30
            )
            
            if response.status_code == 200:
                result = response.json()
                content = result["content"][0]["text"]
                return {"success": True, "code": content}
            else:
                return {"error": f"Erro API: {response.status_code}"}
                
        except Exception as e:
            return {"error": f"Erro de conex√£o: {e}"}
    
    def execute_automation(self, instruction: str) -> Dict:
        """Executa automa√ß√£o baseada em instru√ß√£o"""
        print(f"ü§ñ Analisando: {instruction}")
        
        # Capturar screenshot
        screenshot_bytes = self.capture_screenshot()
        
        # Analisar tela
        analysis = self.analyze_screen(instruction, screenshot_bytes)
        
        if "error" in analysis:
            return analysis
        
        # Executar c√≥digo gerado
        try:
            code = analysis["code"]
            print(f"‚ö° Executando c√≥digo: {code}")
            
            # Executar c√≥digo de forma segura
            exec(code)
            
            return {"success": True, "code": code}
            
        except Exception as e:
            return {"error": f"Erro na execu√ß√£o: {e}"}

class AgentSManager:
    def __init__(self):
        self.agent = None
        self.config_file = Path("config") / "simple_agent_s_config.json"
        self.load_config()
        
    def load_config(self):
        """Carrega configura√ß√£o"""
        if self.config_file.exists():
            with open(self.config_file, 'r', encoding='utf-8') as f:
                self.config = json.load(f)
        else:
            self.config = {
                "api_key": None,
                "model": "claude-3-5-sonnet-20241022",
                "enabled": False
            }
    
    def save_config(self):
        """Salva configura√ß√£o"""
        self.config_file.parent.mkdir(exist_ok=True)
        with open(self.config_file, 'w', encoding='utf-8') as f:
            json.dump(self.config, f, indent=2, ensure_ascii=False)
    
    def setup_agent(self, api_key: Optional[str] = None):
        """Configura o agente"""
        if api_key:
            self.config["api_key"] = api_key
            self.save_config()
        
        self.agent = SimpleAgentS(
            api_key=self.config["api_key"],
            model=self.config["model"]
        )
        
        return self.agent
    
    def test_automation(self, instruction: str = "Abra o Notepad"):
        """Testa automa√ß√£o"""
        if not self.agent:
            print("‚ùå Agente n√£o configurado. Configure a API key primeiro.")
            return False
        
        result = self.agent.execute_automation(instruction)
        
        if "error" in result:
            print(f"‚ùå Erro: {result['error']}")
            return False
        else:
            print("‚úÖ Automa√ß√£o executada com sucesso")
            return True

def create_simple_agent_s_script():
    """Cria script de exemplo para o Simple Agent-S"""
    script_content = '''#!/usr/bin/env python3
"""
Simple Agent-S - Automa√ß√£o de Desktop
Vers√£o simplificada compat√≠vel com Python 3.12.10
"""

import os
import sys
from pathlib import Path

# Adicionar ao path
sys.path.insert(0, str(Path.cwd()))

from agent_s_alternative import AgentSManager

def main():
    """Fun√ß√£o principal"""
    print("üöÄ Simple Agent-S Desktop Automation")
    print("=" * 50)
    
    manager = AgentSManager()
    
    # Verificar configura√ß√£o
    if not manager.config["api_key"]:
        print("‚ùå API key n√£o configurada")
        api_key = input("üîë Digite sua chave da API Anthropic: ").strip()
        if api_key:
            manager.setup_agent(api_key)
            print("‚úÖ API key configurada")
        else:
            print("‚ùå API key necess√°ria para continuar")
            return
    
    # Configurar agente
    agent = manager.setup_agent()
    print("‚úÖ Agente configurado")
    
    # Exemplos de automa√ß√£o
    examples = [
        "Abra o Notepad",
        "Digite 'Hello World' no Notepad",
        "Salve o arquivo como 'test.txt'",
        "Feche o Notepad",
        "Abra o Paint",
        "Desenhe um c√≠rculo no Paint"
    ]
    
    print("\\nüìã Exemplos de automa√ß√£o:")
    for i, example in enumerate(examples, 1):
        print(f"  {i}. {example}")
    
    print("\\nüí° Digite sua instru√ß√£o ou 'sair' para encerrar:")
    
    while True:
        try:
            instruction = input("ü§ñ Instru√ß√£o: ").strip()
            
            if instruction.lower() in ['sair', 'exit', 'quit']:
                break
            
            if instruction:
                success = manager.test_automation(instruction)
                if not success:
                    print("‚ùå Falha na automa√ß√£o")
            
        except KeyboardInterrupt:
            print("\\n‚èπÔ∏è Interrompido pelo usu√°rio")
            break
        except Exception as e:
            print(f"‚ùå Erro: {e}")
    
    print("\\nüëã Encerrando Simple Agent-S")

if __name__ == "__main__":
    main()
'''
    
    # Salvar script
    script_file = Path("scripts") / "simple_agent_s_example.py"
    script_file.parent.mkdir(exist_ok=True)
    
    with open(script_file, 'w', encoding='utf-8') as f:
        f.write(script_content)
    
    return script_file

def create_installation_guide():
    """Cria guia de instala√ß√£o"""
    guide = """# Guia de Instala√ß√£o - Simple Agent-S

## O que √© o Simple Agent-S

Uma vers√£o simplificada do Agent-S framework, compat√≠vel com Python 3.12.10, que oferece:
- **Automa√ß√£o de desktop** baseada em vis√£o computacional
- **Integra√ß√£o com Claude** para an√°lise de screenshots
- **Compatibilidade total** com Python 3.12.10
- **F√°cil configura√ß√£o** e uso

## Instala√ß√£o

### 1. Pr√©-requisitos
- Python 3.12.10 (j√° instalado)
- Chave de API da Anthropic
- PyAutoGUI (instalado automaticamente)

### 2. Configura√ß√£o
1. Obtenha uma chave de API da Anthropic
2. Execute o script de exemplo
3. Digite sua chave de API quando solicitado

### 3. Uso
```bash
python scripts/simple_agent_s_example.py
```

## Exemplos de automa√ß√£o

### B√°sicos
- "Abra o Notepad"
- "Digite 'Hello World' no Notepad"
- "Salve o arquivo como 'test.txt'"
- "Feche o Notepad"

### Avan√ßados
- "Abra o Paint e desenhe um c√≠rculo"
- "Abra o Chrome e v√° para google.com"
- "Abra o Excel e crie uma planilha"

## Recursos

### Automa√ß√µes suportadas
- **Navega√ß√£o de interface** - cliques, digita√ß√£o
- **Manipula√ß√£o de arquivos** - abrir, salvar, fechar
- **Controle de aplicativos** - iniciar, parar
- **Automa√ß√£o web** - navega√ß√£o b√°sica

### Seguran√ßa
- **FAILSAFE habilitado** - mova o mouse para o canto superior esquerdo para parar
- **Pausa entre a√ß√µes** - 0.5 segundos por padr√£o
- **Execu√ß√£o segura** - c√≥digo validado antes da execu√ß√£o

## Troubleshooting

### Problemas comuns
- **Erro de API**: Verifique sua chave da Anthropic
- **Erro de screenshot**: Verifique permiss√µes de tela
- **Erro de automa√ß√£o**: Verifique se o elemento est√° vis√≠vel

### Logs
- Verifique a sa√≠da do console
- Use print() para debug
- Verifique se PyAutoGUI est√° funcionando

## Arquivos criados

```
config/
‚îî‚îÄ‚îÄ simple_agent_s_config.json  # Configura√ß√£o do agente

scripts/
‚îî‚îÄ‚îÄ simple_agent_s_example.py   # Script de exemplo

agent_s_alternative.py          # M√≥dulo principal
```

## Pr√≥ximos passos

1. **Configure sua API key** da Anthropic
2. **Teste com exemplos simples** primeiro
3. **Experimente automa√ß√µes mais complexas**
4. **Integre com outros sistemas** se necess√°rio

## Suporte

Para problemas:
1. Verifique os logs do console
2. Teste com exemplos b√°sicos
3. Verifique sua conex√£o com a internet
4. Confirme que sua API key est√° correta
"""
    
    # Salvar guia
    guide_file = Path("config") / "SIMPLE_AGENT_S_GUIDE.md"
    guide_file.parent.mkdir(exist_ok=True)
    
    with open(guide_file, 'w', encoding='utf-8') as f:
        f.write(guide)
    
    return guide_file

def main():
    """Fun√ß√£o principal"""
    print("üöÄ Simple Agent-S - Vers√£o Alternativa")
    print("=" * 50)
    print("Compat√≠vel com Python 3.12.10")
    print()
    
    # Verificar depend√™ncias
    try:
        import pyautogui
        print("‚úÖ PyAutoGUI encontrado")
    except ImportError:
        print("üì¶ Instalando PyAutoGUI...")
        subprocess.run([sys.executable, "-m", "pip", "install", "pyautogui"], check=True)
        print("‚úÖ PyAutoGUI instalado")
    
    try:
        import requests
        print("‚úÖ Requests encontrado")
    except ImportError:
        print("üì¶ Instalando Requests...")
        subprocess.run([sys.executable, "-m", "pip", "install", "requests"], check=True)
        print("‚úÖ Requests instalado")
    
    # Criar script de exemplo
    script_file = create_simple_agent_s_script()
    print(f"‚úÖ Script criado: {script_file}")
    
    # Criar guia
    guide_file = create_installation_guide()
    print(f"‚úÖ Guia criado: {guide_file}")
    
    print("\n" + "=" * 50)
    print("‚úÖ Simple Agent-S configurado!")
    print("\nüìã Resumo:")
    print("- Vers√£o alternativa criada")
    print("- Compat√≠vel com Python 3.12.10")
    print("- Script de exemplo gerado")
    print("- Guia de instala√ß√£o criado")
    print("\nüìñ Consulte: config/SIMPLE_AGENT_S_GUIDE.md")
    print("üöÄ Execute: python scripts/simple_agent_s_example.py")
    print("\nüéØ Pr√≥ximo passo: Configure sua API key da Anthropic e teste")

if __name__ == "__main__":
    main() 